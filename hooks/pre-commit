#!/bin/bash

# Self-contained Git pre-commit hook to automatically bump version in plugin.json
# This version uses only shell commands and doesn't require Python or external files
# Works across different systems without permission issues

set -e

# Check if this is a merge commit (skip version bump for merges)
if git rev-parse --verify MERGE_HEAD >/dev/null 2>&1; then
    echo "Merge commit detected, skipping version bump"
    exit 0
fi

# Get git root directory
GIT_ROOT=$(git rev-parse --show-toplevel)
PLUGIN_JSON="$GIT_ROOT/py-plugin/.claude-plugin/plugin.json"

# Check if plugin.json exists
if [ ! -f "$PLUGIN_JSON" ]; then
    echo "Warning: $PLUGIN_JSON not found, skipping version bump"
    exit 0
fi

# Check if plugin-related files are being modified in this commit
STAGED_FILES=$(git diff --cached --name-only)
RELEVANT_FILES=$(echo "$STAGED_FILES" | grep -E "^py-plugin/|plugin\.json" || true)

if [ -z "$RELEVANT_FILES" ]; then
    echo "No plugin-related files modified, skipping version bump"
    exit 0
fi

# Extract current version using grep and sed (no Python needed)
CURRENT_VERSION=$(grep '"version"' "$PLUGIN_JSON" | sed 's/.*"version"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')

if [ -z "$CURRENT_VERSION" ]; then
    echo "Error: Could not extract current version from plugin.json"
    exit 1
fi

# Parse version components
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR="${VERSION_PARTS[0]}"
MINOR="${VERSION_PARTS[1]}"
PATCH="${VERSION_PARTS[2]}"

# Validate version parts are numbers
if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
    echo "Error: Invalid version format '$CURRENT_VERSION'. Expected format: X.Y.Z"
    exit 1
fi

# Bump patch version
PATCH=$((PATCH + 1))
NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Create a temporary file for the updated JSON
TEMP_FILE=$(mktemp)

# Update version in JSON file using sed (preserves formatting)
sed "s/\"version\"[[:space:]]*:[[:space:]]*\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" "$PLUGIN_JSON" > "$TEMP_FILE"

# Verify the temp file is valid JSON (basic check)
if ! grep -q "\"version\": \"$NEW_VERSION\"" "$TEMP_FILE"; then
    echo "Error: Failed to update version in JSON"
    rm -f "$TEMP_FILE"
    exit 1
fi

# Replace original file with updated version
mv "$TEMP_FILE" "$PLUGIN_JSON"

# Stage the updated file
git add "$PLUGIN_JSON"

echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
exit 0