name: Auto Version Bump

on:
  push:
    branches: [ main ]
    paths:
      - 'py-plugin/**'
      - '!py-plugin/.claude-plugin/plugin.json'
  
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip version bump]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get current version
      id: current_version
      run: |
        current_version=$(python3 -c "
        import json
        with open('py-plugin/.claude-plugin/plugin.json', 'r') as f:
            data = json.load(f)
        print(data.get('version', '0.0.0'))
        ")
        echo "version=$current_version" >> $GITHUB_OUTPUT
    
    - name: Bump version
      id: bump
      run: |
        bump_type="${{ github.event.inputs.bump_type || 'patch' }}"
        
        python3 -c "
        import json
        import sys
        
        def bump_version(version_str, bump_type):
            parts = version_str.split('.')
            major, minor, patch = map(int, parts)
            
            if bump_type == 'major':
                major += 1
                minor = 0
                patch = 0
            elif bump_type == 'minor':
                minor += 1
                patch = 0
            else:  # patch
                patch += 1
                
            return f'{major}.{minor}.{patch}'
        
        # Read current version
        with open('py-plugin/.claude-plugin/plugin.json', 'r') as f:
            data = json.load(f)
        
        current_version = data.get('version', '0.0.0')
        new_version = bump_version(current_version, '$bump_type')
        
        # Update version
        data['version'] = new_version
        
        # Write back
        with open('py-plugin/.claude-plugin/plugin.json', 'w') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
            f.write('\n')
        
        print(f'Bumped version from {current_version} to {new_version}')
        
        # Output for GitHub Actions
        with open('$GITHUB_OUTPUT', 'a') as f:
            f.write(f'old_version={current_version}\n')
            f.write(f'new_version={new_version}\n')
        "
    
    - name: Commit version bump
      run: |
        git add py-plugin/.claude-plugin/plugin.json
        git commit -m "ðŸ”– Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
        git push
    
    - name: Create release tag
      if: github.event.inputs.bump_type == 'major' || github.event.inputs.bump_type == 'minor'
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release version ${{ steps.bump.outputs.new_version }}"
        git push origin "v${{ steps.bump.outputs.new_version }}"
    
    - name: Summary
      run: |
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous version:** ${{ steps.bump.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New version:** ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump type:** ${{ github.event.inputs.bump_type || 'patch' }}" >> $GITHUB_STEP_SUMMARY